{"version":3,"sources":["../src/components/FormEntry.js"],"names":[],"mappings":"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","file":"FormEntry.js","sourcesContent":["import React from 'react';\nimport Immutable from 'immutable';\nimport {\n  BasicForm,\n  InputField,\n  SelectField,\n  TextareaField\n} from 'react-serial-forms'\nvar FormEntry = React.createClass( {\n  getInitialState: function() {\n        return {\n          serialization: '',\n          addedPeople: Immutable.List(),\n          undoCache: Immutable.List(),\n          added:{}\n        };\n      },\n  propTypes: {\n    form: React.PropTypes.object.isRequired\n  },\n  createChoices: function(answers){\n    var choices = [];\n    var i;\n    for (i = 0; i < answers.length; i++) {\n      var answer = answers[i];\n      choices.push({text: answer.label, value: answer.concept});\n    }\n    return choices;\n  },\n  componentWillReceiveProps: function() {\n    var form = this.props.form;\n    if(!_.isEmpty(form)){\n      self = this;\n      self = this;\n      form.pages.forEach(function (page) {\n        page.sections.forEach(function (section) {\n          section.questions.forEach(function (question) {\n            if(question.type==='obsGroup' && question.questionOptions.rendering==='repeating'){\n              self.state['added'+ question.id] = Immutable.List()\n            }\n          })\n        })\n      })\n    }\n  },\n  addRepeating: function(question) {\n    var self = this;\n    var questionId = question.id\n    var personIndex = this.state['added'+questionId].size;\n    var personKey = 'questions'+'[' + personIndex + ']';\n    var name = questionId+'[' + personKey\n    var concept = questionId+'[concept]';\n    var update = function() {\n      self.forceUpdate();\n    };\n    var fields = []\n    {question.questions.map(function(q, key) {\n       //q.id = name+'['+q.id+']';\n       fields.push(self.renderQuestion(key,q,name,question.questionOptions.rendering))\n    })}\n    var person = (\n      <div key={personIndex} className='person'>\n      <InputField\n        type='hidden'\n        value={question.questionOptions.concept}\n        placeholder=''\n        onChange={update}\n        id={concept}\n       name={concept}\n      validation='required'/>\n        {fields}\n      </div>\n    );\n    this.setState(function(prev) {\n      var newState = {\n        undoCache: prev.undoCache.push(this.state['added'+questionId]),\n      }\n      newState['added'+questionId] = prev['added'+questionId].push(person)\n      return newState;\n    }, update);\n  },\n  renderQuestion: function(k,question,groupKey,rendering){\n    var questionId = question.id\n    var conceptKey=questionId+'[concept]'\n    var answerKey=questionId+'[answer]'\n    if (groupKey && rendering==='group'){\n      conceptKey=groupKey+'['+question.id+']'+'[concept]'\n      answerKey=groupKey+'['+question.id+']'+'[answer]'\n    }else if (groupKey && rendering==='repeating') {\n      conceptKey=groupKey+'['+question.id+']'+'[concept]'\n      answerKey=groupKey+'['+question.id+']'+'[answer]'\n    }\n    self = this;\n    var update = function() {\n      self.forceUpdate();\n    };\n    var input = '';\n    if(question.questionOptions.rendering==='number'){\n      input = <p key={k}>\n       <label htmlFor={questionId}>{question.label}</label>\n         <InputField\n           type='hidden'\n           placeholder=''\n           onChange={update}\n           id={conceptKey}\n           name={conceptKey}\n           value={question.questionOptions.concept}/>\n         <InputField\n           className=\"form-control\"\n           onChange={update}\n           type='number'\n           placeholder=''\n           id={answerKey}\n           name={answerKey}\n         validation='required'/>\n    </p>\n    }else if (question.questionOptions.rendering==='date') {\n      input = <p key={k}>\n       <label htmlFor={questionId}>{question.label}</label>\n         <InputField\n           type='hidden'\n           placeholder=''\n           onChange={update}\n           id={conceptKey}\n           name={conceptKey}\n           value={question.questionOptions.concept}/>\n         <InputField\n           className=\"form-control\"\n           onChange={update}\n           type='text'\n           placeholder=''\n           id={answerKey}\n           name={answerKey}\n         validation='required'/>\n    </p>\n    }else if (question.questionOptions.rendering==='select') {\n      //use https://github.com/JedWatson/react-select\n      var choices=[{text:'Please select',value:''}].concat(self.createChoices(question.questionOptions.answers));\n      input = <p key={k}>\n       <label htmlFor={question.id}>{question.label}</label>\n         <InputField\n           className=\"form-control\"\n           type='hidden'\n           placeholder=''\n           onChange={update}\n           id={conceptKey}\n          name={conceptKey}\n           value={question.questionOptions.concept}/>\n         <SelectField\n           className=\"form-control\"\n           onChange={update}\n           options={choices}\n           type='text'\n           placeholder=''\n           id={answerKey}\n           name={answerKey}\n         validation='required'/>\n    </p>\n    }\n    else if (question.questionOptions.rendering==='multiCheckbox') {\n      //use https://github.com/JedWatson/react-select\n      var choices=self.createChoices(question.questionOptions.answers);\n      input = <p key={k}>\n       <label htmlFor={questionId}>{question.label}</label>\n         <InputField\n           type='hidden'\n           placeholder=''\n           onChange={update}\n           id={conceptKey}\n           name={conceptKey}\n           value={question.questionOptions.concept}/>\n         <SelectField\n           className=\"form-control\"\n            multiple={true}\n           onChange={update}\n           options={choices}\n           type='text'\n           placeholder=''\n           id={answerKey}\n           name={answerKey}\n         validation='required'/>\n    </p>\n    }\n    else {\n      input = <p key={k}>\n       <label htmlFor={question.id}>{question.label}</label>\n         <InputField\n           type='hidden'\n           placeholder=''\n           onChange={update}\n           id={conceptKey}\n           name={conceptKey}\n           value={question.questionOptions.concept}\n         validation='required'/>\n         <InputField\n           className=\"form-control\"\n           type='text'\n           placeholder=''\n           onChange={update}\n           id={answerKey}\n           name={answerKey}\n         validation='required'/>\n    </p>\n    }\n    return input;\n  },\n  serialization: function() {\n        if (this.refs.myForm) {\n          return this.refs.myForm.serialize();\n        }\n        return {};\n      },\nonSubmit: function(event) {\n        var self = this;\n        console.log('Submitted. Checking async errors.');\n        this.refs.myForm.validate(function(errs) {\n          if (errs) {\n            alert('There are ' + errs.length + ' errors.');\n            alert('Check out your console to see them.');\n            console.log(errs);\n            return;\n          }\n          alert('All passed! No errors.');\n        });\n        event.preventDefault();\n      },\n  render: function() {\n    var self = this;\n    function renderGroup(question){\n      var fields = []\n      var questionId = question.id\n      var personIndex = 'n';\n      var personKey = 'questions'+'[' + 0 + ']';\n      var name = questionId+'[' + personKey\n      var concept = questionId+'[concept]';\n      var groupKey = questionId+'[questions]'\n\n      question.questions.map(function(q, key) {\n        var qId = q.id;\n        var name = name + '['+qId+']'\n        q.name = name;\n         fields.push(self.renderQuestion(key,q,groupKey+'['+key+']',question.questionOptions.rendering))\n      })\n      var person = (\n        <div key={personIndex} className='person'>\n        <InputField\n          type='hidden'\n          value={question.questionOptions.concept}\n          placeholder=''\n          {...attrs}\n          id={concept}\n         name={concept}\n        validation='required'/>\n          {fields}\n        </div>\n      );\n      return person;\n    }\n\n    function createChoices(answers){\n      var choices = [];\n      var i;\n      for (i = 0; i < answers.length; i++) {\n        var answer = answers[i];\n        choices.push({text: answer.label, value: answer.concept});\n      }\n      return choices;\n    }\n    var self = this;\n       var serialization = JSON.stringify(this.serialization(), null, 2);\n    // For the sake of this demo, update the json all the time.\n    var attrs = {\n         onChange: function() {\n          self.forceUpdate();\n         }\n       };\n       if(_.isEmpty(this.props.form)){\n         return null\n       }\n    return (\n      <div>\n      <BasicForm ref='myForm' onKeyUp={this.onChange} onSubmit={this.onSubmit}>\n      <div className='container' >\n        <div className='row' >\n          <div className='col-md-6' >\n        {this.props.form.pages.map(function(page, i) {\n        return (\n          <div key={i}>\n          <div>\n            {page.sections.map(function(section, j) {\n              return (<div key={j} className=\"panel panel-primary\">\n              <div className=\"panel-heading\">\n                {section.label}\n                </div>\n                <div>\n                {section.questions.map(function(question, k) {\n                  if(question.type==='obs'){\n                    return (self.renderQuestion(k,question));\n                  }else if(question.type==='encounterDatetime'){\n                    return (self.renderQuestion(k,question));\n                  }else if (question.type==='encounterProvider') {\n                    return (self.renderQuestion(k,question));\n                  }\n                 else if (question.type==='encounterLocation') {\n                   return (self.renderQuestion(k,question));\n                 }else if (question.type==='personAttribute') {\n                   return (self.renderQuestion(k,question));\n                 }else if (question.type==='obsGroup' && question.questionOptions.rendering==='group') {\n                    return (<div  key={k}>\n                        {renderGroup(question)}\n                    </div>)\n                  }else if (question.type==='obsGroup' && question.questionOptions.rendering==='repeating') {\n                    if(_.isUndefined(self.state['added'+ question.id])){\n                      return null;\n                    }\n                    return (<div className='well' key={k}>\n                    <h2>{question.label}</h2>\n                    <button className='btn btn-primary' onClick={()=>self.addRepeating(question)} type='button'>Add</button>\n                    {\n                      self.state['added'+ question.id].map(function(person) {\n                      return person;\n                    })}\n\n\n                    </div>)\n                  }\n           })}\n           </div>\n              </div>);\n            })}\n\n          </div>\n           </div>\n        );\n      })}\n      </div>\n      <div className='col-md-6'>\n             <pre>\n               {serialization}\n             </pre>\n           </div>\n         </div>\n       </div>\n      </BasicForm>\n      </div>\n    );\n  }\n} );\nmodule.exports = FormEntry;\n"]}